#!/usr/bin/env zsh
###############################################################################
# I had a lot of trouble with updating and hooks not working
# Searching located some Stack Overflow posts with a simple fix
# It helped in my case, but I thought this was a good chance
#   to make a script to automate new project setup ... here it is.
# based on pre-commit 1.15.1 <https://pre-commit.com/>

###############################################################################
# .info.cfg - Source Author Information and general strings, functions,
#   and blobs. This file gives general fields:
#       [description, author, copyright, license,
#       github, portfolio, twitter, generic_usage]
#   and these specific fields:
#       [program_usage, program_instructions, sample_settings_template]
#   May also contain:
#       [version, name, and detail]
#   to overide the defaults that are set above.
if [ -r './.info.cfg' ]; then
    source ./.info.cfg
else
    source $HOME/bin/utilities/.info.cfg
fi
###############################################################################
# Install prerequisites as needed
#   brew, git, hub, pipenv, pre-commit
prereqs_checkup () {
    brew_checkup () {
        which -s brew &>/dev/null
        if [[ $? != 0 ]] ; then
            # Install Homebrew
            echo 'Homebrew is required but not installed. Installing latest version ...'
            echo ''
            xcode-select --install &>/dev/null
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            which -s brew &>/dev/null
            if [[ $? != 0 ]] ; then
                echo 'Homebrew is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                echo `brew --version | tail -n +1 | head -1`' installed ... continuing with setup ...'
                echo ''
            fi
        fi
        brew update &>/dev/null
        brew doctor &>/dev/null
    }
    git_checkup () {
        which -s git &>/dev/null
        if [[ $? != 0 ]]; then
            echo 'Git is required but not installed. Installing latest version ...'
            echo ''
            brew install git &>/dev/null
            which -s git &>/dev/null
            if [[ $? != 0 ]]; then
                echo 'Git is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                echo `git --version | tail -n +1 | head -1`' installed ... continuing with setup ...'
                echo ''
            fi
        brew update git &>/dev/null
        fi
    }
    hub_checkup () {
        which -s hub &>/dev/null
        if [[ $? != 0 ]]; then
            echo 'Hub is required but not installed. Installing latest version ...'
            echo ''
            brew install hub &>/dev/null
            which -s hub &>/dev/null
            if [[ $? != 0 ]]; then
                echo 'Hub is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                echo `hub --version | grep hub`' installed ... continuing with setup ...'
                echo ''
            fi
            brew update hub &>/dev/null
        fi
    }
    pipenv_checkup () {
        which -s pipenv &>/dev/null
        if [[ $? != 0 ]]; then
            echo 'Pipenv is required but not installed. Installing latest version ...'
            echo ''
            brew install pipenv &>/dev/null
            which -s pipenv &>/dev/null
            if [[ $? != 0 ]]; then
                echo 'Pipenv is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                echo `pipenv --version`' installed ... continuing with setup ...'
                echo ''
            fi
        brew update pipenv &>/dev/null
        fi
    }
    pre_commit_checkup () {
        which -s pre-commit &>/dev/null
        if [[ $? != 0 ]]; then
            brew install pre-commit &>/dev/null
            which -s pre-commit &>/dev/null
            if [[ $? != 0 ]]; then
                echo 'Pre-commit is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                echo `pre-commit --version`' installed ... continuing with pre-commit setup'
                echo ''
                # use my sample template instead of `pre-commit sample-config`
                echo "$sample_settings_template" >.pre-commit-template.yaml
                pre-commit install
                pre-commit install-hooks
                pre-commit autoupdate
            fi
        fi
    }

    echo "Project setup: Brew, git, hub, pipenv, pre-commit, travis, codecov."
    echo ""
    brew_checkup
    git_checkup
    hub_checkup
    pipenv_checkup
    pre_commit_checkup
}
###############################################################################
# Setup Repo - git, github remote, pipenv install, pre-commit config
yaml_checkup () {
    # pre-commit yaml: check for template, backup config, update new config
    yaml_backup () {
        if [ -r ".pre-commit-config.yaml" ]; then
            cp -f .pre-commit-config.yaml bak/.pre-commit-config.yaml.bak
            error_code=$?
            if [[ $error_code != 0 ]]; then
                echo "WARNING - backup file NOT created: .pre-commit-config.yaml.bak"
                # ONLY WARN -- NO EXIT $error_code
            else
                echo "-> backup file created: .pre-commit-config.yaml.bak"
            fi
        fi
    }
    yaml_config () {
        # copy template to current config file
        cat .pre-commit-template.yaml >.pre-commit-config.yaml
        error_code=$?
        #   and check to make sure it worked ...
        if [[ $error_code != 0 ]]; then
            echo "WARNING: config file NOT created: .pre-commit-config.yaml"
            echo 'Exiting now ...'
            exit $error_code
        else
            echo "-> config file created: .pre-commit-config.yaml"
        fi
        # update current config from GitHub repo
        #   and check to make sure it worked ...
        pre-commit autoupdate
        if [[ $? != 0 ]]; then
            echo -e "\nWARNING: Error occured while retrieving updated 'master:sha' values from GitHub. Please check your connection and try again later.\n\n"
            exit 1
        else
            echo -e "\nPre-commit successfully updated your configuration."
            git add --all &>/dev/null
            pre-commit &>/dev/null # catch formatting fixes
            git add --all # again ... after formatting ...
            pre-commit # again ... after formatting ...
        fi
    }

    # check for a template ... generate if necessary ...
    if [ -r ".pre-commit-template.yaml" ]; then
        echo "Template file (.pre-commit-template.yaml) found in current directory."
    else
        # ONLY WARN -- NO EXIT ... generate needed default template
        echo "WARNING: Template file (.pre-commit-template.yaml) NOT found in current directory."
        echo "Using generic template ..."
        echo ""
        echo "$sample_settings_template" >.pre-commit-template.yaml
    fi
    yaml_backup
    yaml_config
}

setup_files () {
    which_copy () {
        # backup previous and create default file
        if [ -r "./$file_bak" ]; then
            cp -f $file_bak bak/$file_bak.bak &>/dev/null
        else
            which -s $filebak &>/dev/null
            if [[ $? != 0 ]]; then
                cat `which $file_bak` >$file_bak
            fi
        fi
    }
    readme_md () {
        # Generate default README.md
        cp -f README.md bak/README.bak.md &>/dev/null
        echo "# $name version $version" >README.md
        echo "# time"
        echo -e "\n---\n" >>README.md
        echo -e '```bash\n' >>README.md
        tree >>README.md
        echo -e '\n```' >>README.md
        echo -e "\n---\n" >>README.md
        echo "## $detail\n" >>README.md
        echo '```bash\n' >>README.md
        echo "$sample_settings_template" >>README.md
        echo '```\n' >>README.md
    }
    file_bak='.gitignore' && which_copy
    file_bak='.info.cfg' && which_copy
    file_bak='.travis.yml' && which_copy
    file_bak='codecov.yml' && which_copy
    file_bak='pc' && which_copy

    readme_md

    if [ -r ".pre-commit-template.yaml" ]; then
        echo "Template file (.pre-commit-template.yaml) found in current directory."
    else
        echo "Template file (.pre-commit-template.yaml) NOT found in current directory."
        echo "Using generic template ..."
        echo ""
        echo "$sample_settings_template" >.pre-commit-template.yaml
    fi
}
git_repo () {
    mkdir -p bak &>/dev/null
    git status &>/dev/null
    if [[ $? != 0 ]]; then
        echo 'This is not a git repo. Setting up git and github ...'
        echo ''
        echo 'Git repo setup ...'
        echo ''
        git init
        echo 'GitHub remote repo setup ...'
        echo ''
        hub create
        echo ''
    fi
    # initialize pipenv
    pipenv graph &>/dev/null
    if [[ $? != 0 ]]; then
        echo 'This is not a pipenv virtual environment.'
        echo 'Setting up pipenv --python 3.7 ...'
        echo ''
        pipenv --python 3.7
    fi
    # pipenv shell # this screws up the script ...
    pipenv clean
    pipenv graph
    pipenv check
    pip freeze >requirements.txt
    # git initial commit
    git add --all &>/dev/null
    pre-commit &>/dev/null # catch formatting fixes
    git add --all # again ... after formatting ...
    git commit -m 'initial commit'
    git push --set-upstream origin master
    git status
    git remote -v
}
all_checkups () {
    prereqs_checkup
    setup_files
    git_repo
    yaml_checkup
}
check_args () {
    case "$arg1" in
        init|-i|--init)
            all_checkups
            exit 0
            ;;

        reset|-r|--reset)
            echo ''
            echo '-> pc - reset initial repo files'
            setup_files
            exit 0
            ;;

        version|-v|--version)
            echo "$description"
            exit 0
            ;;

        help|-h|--help)
            echo "$program_instructions"
            exit 0
            ;;

        commit|-m)
            if [[ $arg2 != 0 ]]; then
                yaml_checkup
                git add --all
                git commit -m "$arg2"
                git push
                exit 0
            else
                echo "You must specify a commit message to perform a commit."
                echo ""
                exit 2
            fi
            ;;
        *)
            echo "Invalid option: $arg1"
            echo ""
            echo "$program_usage"
            exit 2
    esac
}
main_loop () {
    git status &>/dev/null
    if [[ $? != 0 ]]; then
        all_checkups
    else
        yaml_checkup
    fi
}

if [[ -n "$1" ]]; then
    arg1="$1"
    arg2="$2"
    check_args
else
    main_loop
fi
