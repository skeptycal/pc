#!/usr/bin/env bash
#* #############################################################################
# pc : pre-commit repo automation for macOS (version 1.5.3)

# author    - Michael Treanor  <skeptycal@gmail.com>
# copyright - 2019 (c) Michael Treanor
# license   - MIT <https://opensource.org/licenses/MIT>
# github    - https://www.github.com/skeptycal

# Usage: pc {init|reset|version|help}
#
#   Parameters:
#       [init, -i, --init]        -- install and initialize
#       [commit, -m] MESSAGE      -- git commit and push with MESSAGE
#       [reset, -r, --reset]      -- reset initial repo files (with backup)
#       [version, -v, --version]  -- display version information
#       [help, -h, --help]        -- display usage and information"
#
#   .pre-commit-template.yaml must be in current directory
#       If not, a generic template will be created
#   .pre-commit-bak.yaml will be created (if possible)
#       from .pre-commit-config.yaml as backup
#   .pre-commit-config.yaml will be *overwritten*
#       and updated to current master sha from GitHub
#* #############################################################################
# Disclaimer and reasoning:
#   I had a lot of trouble with updating and hooks not working
#   Searching located some Stack Overflow posts with a simple fix
#   It helped in my case, but I thought this was a good chance
#   to make a script to automate new project setup and periodic updates...
#
#   based on pre-commit 1.15.1 <https://pre-commit.com/>
#* #############################################################################
#* setup script variables and defaults
    # FYI - I always use GNU Coreutils - on macOS: 'brew install coreutils'

    # load some basic ansi text colors (OPTIONAL - output redirected)
    #   script will run fine wihout this; you just wont have the colors =)
    source "$HOME/bin/symlinks/scripts/basic_text_colors.sh" &>/dev/null || fake_colors
    # Identify default settings path
    #   default is the folder that this global script is running from,
    #   but you may adjust as needed to use a separate settings folder,
    #   (e.g.) bin_path="$HOME/bin/utilities/",
    bin_path=$(realpath $0)
    bin_path="${bin_path%/*}"
    #   (location for default copies of .info.cfg, .gitignore, README.md
    #   .travis.yml, bitbucket_pipelines.yml, codedov.yml, gpg_public.txt
    #   requirements.txt, Pipfile, setup.py, .pre-commit-config.yaml, etc)

    # identify this actual script name and current directory path
    _self=${0##*/}
    # parameter expansion to remove trailing /filename
    # _path="${0%/*}"
    here=$PWD

    mkdir -pv "$here/bak"
    # Set default readme file (usually <md> or <rst>)
    #    (<1st>, <now>, <txt>, or <asc> are older forms.)
    readme="README.md"

    # load configuration file (.info.cfg) from repo directory (or default)
    source "${here}/.info.cfg" &>/dev/null || source "${bin_path}/.info.cfg" &>/dev/null

    # list of files that *may* be present and should be backed up
    file_list=( license LICENSE .GITIGNORE MANIFEST.in .gitignore .info.cfg .travis.yml .bitbucket-pipelines.yml codecov.yml .babelrc .dockerignore .env-sample azure-ci-pipeline.yml azure-deploy-pipeline.yml docker-compose.yml Dockerfile dockerfile tox.ini makefile manage.py package.json pipfile pytest.ini requirements.txt setup.py webpack.config.js uwsgi.ini )

echo() {
    # This makes echo more consistent and portable
    if [ "$#" -gt 0 ]; then
        printf %s "$1"
        shift
    fi
    if [ "$#" -gt 0 ]; then
        printf ' %s' "$@"
    fi
    printf '\n'
}
br() { # yes, this is a fake cli version of <br />
    printf '\n'
}
bak() {
    # backup $1
    #    to the bak/ directory in current directory
    #    add extension .bak
    [ -r "$1" ] && cp -f "$here/$1" "$here/bak/$1.bak" &>/dev/null || (we "Not able to create backup for ${1}.")
}
check_template() {
    if [ -r ".pre-commit-template.yaml" ]; then
        oe "Template file (.pre-commit-template.yaml) found in current directory."
    else
        we "Template file (.pre-commit-template.yaml) NOT found in current directory."
        oe "Using generic template ...\n"
        echo "$sample_settings_template" >|"$here/.pre-commit-template.yaml"
    fi
}
#* #############################################################################
#* Prerequisites
prereqs_checkup() {
    # Check for prerequisites - used during init session only
    #   install prerequisites as needed: brew, git, hub, pipenv, pre-commit
    brew_checkup() {
        ge "Checking Homebrew "
        which -s brew &>/dev/null
        if [[ $? != 0 ]]; then
            # Install Homebrew
            we 'Homebrew is required but not installed. Installing latest version ...'
            br
            xcode-select --install &>/dev/null
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            which -s brew &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Homebrew is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                br
                exit 1
            else
                oe $(brew --version | tail -n +1 | head -1)' installed ... checking for updates ...'
                br
            fi
        else
            oe $(brew --version | tail -n +1 | head -1)' installed ... checking for updates ...'
            br
        fi
        brew update &>/dev/null
        brew doctor &>/dev/null
        brew cleanup &>/dev/null
    }
    git_checkup() {
        ge "Checking Git"
        which -s git &>/dev/null
        if [[ $? != 0 ]]; then
            we 'Git is required but not installed. Installing latest HomeBrew version ...'
            br
            brew install git &>/dev/null
            which -s git &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Git is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                br
                exit 1
            fi
        else
            brew update git &>/dev/null
        fi
        oe $(git --version | tail -n +1 | head -1)' installed ... continuing with setup ...'
        br
    }
    hub_checkup() {
        ge "Checking Hub"
        which -s hub &>/dev/null
        if [[ $? != 0 ]]; then
            we 'Hub is required but not installed. Installing latest version ...'
            br
            brew install hub &>/dev/null
            which -s hub &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Hub is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                br
                exit 1
            fi
        else
            brew update hub &>/dev/null
        fi
        oe $(hub --version | grep hub)' installed ... continuing with setup ...'
        br
    }
    pipenv_checkup() {
        ge "Checking PipEnv"
        which -s pipenv &>/dev/null
        if [[ $? != 0 ]]; then
            we 'Pipenv is required but not installed. Installing latest version ...'
            br
            brew install pipenv &>/dev/null
            which -s pipenv &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Pipenv is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                br
                exit 1
            fi
        else
            brew update pipenv &>/dev/null
        fi
        oe $(pipenv --version)' installed ... continuing with setup ...'
        br
    }
    pre_commit_checkup() {
        ge "Checking Pre-commit"
        which -s pre-commit &>/dev/null
        if [[ $? != 0 ]]; then
            brew install pre-commit &>/dev/null
            which -s pre-commit &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Pre-commit is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                br
                exit 1
            fi
        else
            brew update pre-commit &>/dev/null
        fi
        oe $(pre-commit --version)' installed ... continuing with pre-commit setup'
        br
    }
    echo ""
    ge "Checking Prerequisites"
    brew_checkup
    git_checkup
    hub_checkup
    pipenv_checkup
    pre_commit_checkup
}
#* #############################################################################
#* Setup Repo - git, github remote, pipenv install, pre-commit config
readme_md() {
    bak $readme
    if [ -r "$readme" ]; then
        # Modify $readme file if it exists
    #     we "TODO Implement Update $readme date, version bump, tree, etc."
    # else
        # Generate new default README.md
        echo "# $name version $version" >|$readme
        echo '' >>$readme
        echo "${badges}" >>$readme
        echo '' >>$readme
        echo $(date +"Last update: %m-%d-%Y | %T") >>$readme
        echo '' >>$readme
        echo "---" >>$readme
        echo '' >>$readme
        echo "### $detail" >>$readme
        echo '' >>$readme
        echo '```bash' >>$readme
        echo "$program_instructions" >>$readme
        echo '```' >>$readme
        echo '' >>$readme
        echo "---" >>$readme
        echo '' >>$readme
        echo '```bash' >>$readme
        tree >>$readme
        echo '```' >>$readme
        echo '' >>$readme
    fi
}
setup_files() {
    ge "Backup and reset of configuration files to $here/bak/ ..."
    # for i in "${arrayName[@]}"
    # do
    # :
    # # do whatever on $i
    # done
    for i in "${file_list[@]}"
    do
        we ${i}
        bak ${i}
        [[ ! -r "${here}/${i}" ]] && cp "${bin_path}/${i}" "${here}/${i}" &>/dev/null
    done
    readme_md
    yaml_checkup
}
git_repo() {
    git status &>/dev/null
    if [[ $? != 0 ]]; then
        oe 'This is not a git repo. Setting up git and github ...'
        br
        ge 'Git repo setup ...'
        br
        git init
        ge 'GitHub remote repo setup ...'
        br
        hub create
        br
    fi
    # initialize pipenv
    pipenv graph &>/dev/null
    if [[ $? != 0 ]]; then
        oe 'This is not a pipenv virtual environment.'
        ge 'Setting up pipenv --python 3.7 ...'
        br
        pipenv --python 3.7
    fi
    # pipenv shell # this screws up the script ...
    pipenv clean
    pipenv graph
    pipenv check
    pipenv run pip freeze >|requirements.txt
    # pre-commit setup
    pre-commit install
    pre-commit install-hooks
    pre-commit autoupdate
    git add --all &>/dev/null
    pre-commit &>/dev/null # catch formatting fixes
    git add --all          # again ... after formatting ...
    git commit -m 'initial commit'
    git push --set-upstream origin master
    git status
    git remote -v
}
yaml_checkup() {
    # pre-commit yaml: backup config, check for template, update new config
    yaml_config() {
        check_template
        readme_md
        cp -f "${here}/.pre-commit-template.yaml" "${here}/.pre-commit-config.yaml"
        error_code=$?
        #   and check to make sure it worked ...
        if [[ $error_code != 0 ]]; then
            we "WARNING: config file NOT created: .pre-commit-config.yaml"
            we 'Exiting now ...'
            exit $error_code
        else
            oe "Config file updated: .pre-commit-config.yaml"
        fi
        # update current config from GitHub repo
        #   and check to make sure it worked ...
        pre-commit autoupdate
        if [[ $? != 0 ]]; then
            we "\nWARNING: Error occured while retrieving updated 'master:sha' values from GitHub. Please check your connection and try again later.\n\n"
            exit 1
        else
            oe "\nPre-commit successfully updated your configuration."
            ce $RESET
            git add --all &>/dev/null
            pre-commit &>/dev/null # catch formatting fixes
            git add --all          # again ... after formatting ...
            pre-commit             # again ... after formatting ...
        fi
    }
    bak .pre-commit-config.yaml
    yaml_config
    git push
    exit 0
}
all_checkups() {
    oe "Project setup: Brew, git, hub, pipenv, pre-commit, travis, codecov."
    prereqs_checkup
    setup_files
    git_repo
    yaml_checkup
    exit 0
}
#* #############################################################################
#* Respond to arguments
check_args() {
    case "$1" in
        init | -i | --init)
            br
            oe 'Initializing repository ...\n'
            all_checkups
            br
            exit 0
            ;;

        reset | -r | --reset)
            br
            oe 'Resetting initial repo files ...\n'
            setup_files
            br
            exit 0
            ;;

        version | -v | --version)
            oe "$description"
            br
            exit 0
            ;;

        usage | -u | --usage)
            oe "$program_usage"
            br
            exit 0
            ;;

        help | -h | --help)
            oe "$program_instructions"
            br
            exit 0
            ;;

        readme)
            readme_md
            br
            exit 0
            ;;

        commit | -m | --message)
            if [[ -z $2 ]]; then
                we "You must specify a commit message to perform a commit."
                br
                exit 2
            else
                yaml_checkup
                git add --all &>/dev/null
                pre-commit &>/dev/null # catch formatting fixes
                git add --all          # again ... after formatting ...
                git commit -m "$2"
                git push
                br
                exit 0
            fi
            ;;

        *)
            we "Invalid option: $1"
            echo ""
            oe "$program_usage"
            br
            exit 2
            ;;

    esac
    exit 0
}

main_loop() {
    #* #########################################################################
    #* if no args ... default operation
    me "\n*****************************************************************"
    oe "${description}\n"
    ge "The active repo is: $here/\n"

    # if config file present && git repo setup -> assume setup is complete
    #     if (.info.cfg readable) AND (if .pre-commit-config.yaml readable)
    #     AND (NOT <git status> return 0) -> run regular update ELSE run setup
    [[ -r "$here/.info.cfg" ]] && [[ -r "$here/.pre-commit-config.yaml" ]] && [[ ! $(git status &>/dev/null) ]] && yaml_checkup || all_checkups
    br
    exit 0
}

#* #########################################################################
#* if arguments are present ... go to check_args else main_loop
    [[ -n "$1" ]] && check_args "$@" || main_loop "$@"
