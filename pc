#!/usr/bin/env zsh
#* #############################################################################
# pc : pre-commit repo automation for macOS (version 1.2.1)

# author    - Michael Treanor  <skeptycal@gmail.com>
# copyright - 2019 (c) Michael Treanor
# license   - MIT <https://opensource.org/licenses/MIT>
# github    - https://www.github.com/skeptycal

# Usage: pc {init|reset|version|help}

#   Parameters:
#       init, -i, --init        -- install and initialize
#       reset, -r, --reset      -- reset initial repo files (with backup)
#       version, -v, --version  -- display version information
#       help, -h, --help        -- display usage and information

#   .pre-commit-template.yaml must be in current directory
#       If not, a generic template will be created
#   .pre-commit-bak.yaml will be created (if possible)
#       from .pre-commit-config.yaml as backup
#   .pre-commit-config.yaml will be *overwritten*
#       and updated to current master sha from GitHub
#* #############################################################################
# Disclaimer and reasoning:
#   I had a lot of trouble with updating and hooks not working
#   Searching located some Stack Overflow posts with a simple fix
#   It helped in my case, but I thought this was a good chance
#   to make a script to automate new project setup and periodic updates...
#
#   based on pre-commit 1.15.1 <https://pre-commit.com/>
#* #############################################################################

# FYI - I always use GNU Coreutils - on macOS: 'brew install coreutils'
#* #############################################################################
#* setup script variables and defaults
    # identify default settings path (location for default copies of .info.cfg, .gitignore, README.md, .travis.yml, bitbucket_pipelines.yml, codedov.yml, gpg_public.txt, requirements.txt, Pipfile, setup.py, .pre-commit-config.yaml, etc)
    #   default is the folder that this global script is running from,
    #   but you may adjust as needed to use a separate settings folder,
    #   (e.g.) bin_path="$HOME/bin/utilities/pc_bak/",
    #       bin_path="$HOME/my/project/defaults/", etc
    bin_path=$(realpath $0)
    bin_path="${bin_path%/*}"'/'

    # identify this actual script name and current directory path
    _self=${0##*/}
    # parameter expansion to remove trailing /filename
    # _path="${0%/*}"
    here=$PWD'/'

    # load configuration file (.info.cfg) or default config
    source "${here}.info.cfg" &>/dev/null || source "${bin_path}.info.cfg" &>/dev/null


echo() {
  if [ "$#" -gt 0 ]; then
     printf %s "$1"
     shift
  fi
  if [ "$#" -gt 0 ]; then
     printf ' %s' "$@"
  fi
  printf '\n'
}

bak() {
    # backup $1 to the bak/ directory and add extension .bak
    cp -rf "$here/$1" "$here/bak/$1.bak" &>/dev/null
}

#! color tests
# echo "\n\n${ATTN}test"
# echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx${RESET}"
# ce "$CANARY" "_selfxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# me "main xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# we "warn xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# ge "green xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# pe "purple xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

#* #############################################################################
#* Prerequisites
prereqs_checkup() {
    # Check for prerequisites - used during init session only
    #   install prerequisites as needed: brew, git, hub, pipenv, pre-commit
    brew_checkup() {
        which -s brew &>/dev/null
        if [[ $? != 0 ]]; then
            # Install Homebrew
            we 'Homebrew is required but not installed. Installing latest version ...'
            echo ''
            xcode-select --install &>/dev/null
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            which -s brew &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Homebrew is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                oe $(brew --version | tail -n +1 | head -1)' installed ... checking for updates ...'
                echo ''
            fi
        else
            oe $(brew --version | tail -n +1 | head -1)' installed ... checking for updates ...'
            echo ''
        fi
        brew update &>/dev/null
        brew doctor &>/dev/null
    }
    git_checkup() {
        which -s git &>/dev/null
        if [[ $? != 0 ]]; then
            we 'Git is required but not installed. Installing latest version ...'
            echo ''
            brew install git &>/dev/null
            which -s git &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Git is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                oe $(git --version | tail -n +1 | head -1)' installed ... continuing with setup ...'
                echo ''
            fi
        else
            brew update git &>/dev/null
            oe $(git --version | tail -n +1 | head -1)' installed ... continuing with setup ...'
            echo ''
        fi
    }
    hub_checkup() {
        which -s hub &>/dev/null
        if [[ $? != 0 ]]; then
            we 'Hub is required but not installed. Installing latest version ...'
            echo ''
            brew install hub &>/dev/null
            which -s hub &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Hub is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                oe $(hub --version | grep hub)' installed ... continuing with setup ...'
                echo ''
            fi
        else
            brew update hub &>/dev/null
            oe $(hub --version | grep hub)' installed ... continuing with setup ...'
                echo ''
        fi
    }
    pipenv_checkup() {
        which -s pipenv &>/dev/null
        if [[ $? != 0 ]]; then
            we 'Pipenv is required but not installed. Installing latest version ...'
            echo ''
            brew install pipenv &>/dev/null
            which -s pipenv &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Pipenv is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                oe $(pipenv --version)' installed ... continuing with setup ...'
                echo ''
            fi
            brew update pipenv &>/dev/null
            oe $(pipenv --version)' installed ... continuing with setup ...'
            echo ''
        else
            oe $(pipenv --version)' installed ... continuing with setup ...'
            echo ''
        fi
    }
    pre_commit_checkup() {
        which -s pre-commit &>/dev/null
        if [[ $? != 0 ]]; then
            brew install pre-commit &>/dev/null
            which -s pre-commit &>/dev/null
            if [[ $? != 0 ]]; then
                we 'Pre-commit is required but the installation failed. Please check your internet connection and password (if needed) and run this program again. Exiting ...'
                echo ''
                exit 1
            else
                oe $(pre-commit --version)' installed ... continuing with pre-commit setup'
                oe ''
            fi
        else
            oe $(pre-commit --version)' installed ... continuing with pre-commit setup'
        fi
    }

    oe "Project setup: Brew, git, hub, pipenv, pre-commit, travis, codecov."
    echo ""
    ge "Checking Prerequisites"
    ge "Checking Homebrew"
    brew_checkup
    ge "Checking Git"
    git_checkup
    ge "Checking Hub"
    hub_checkup
    ge "Checking PipEnv"
    pipenv_checkup
    ge "Checking Pre-commit"
    pre_commit_checkup
}
#* #############################################################################
#* Setup Repo - git, github remote, pipenv install, pre-commit config
readme_md() {
    # Generate default README.md
    bak README.md
    echo "# $name version $version" >|README.md
    echo "\n$badges\n" >>README.md
    echo $(date +"Last update: %m-%d-%Y | %T") >>README.md
    echo "\n---\n" >>README.md
    echo "## $detail\n" >>README.md
    echo '```bash\n' >>README.md
    echo "$program_instructions" >>README.md
    echo '```\n' >>README.md
    echo "\n---\n" >>README.md
    echo '```bash\n' >>README.md
    tree >>README.md
    echo '```\n' >>README.md
}
yaml_checkup() {
    # pre-commit yaml: check for template, backup config, update new config
    yaml_backup() {
        if [ -r ".pre-commit-config.yaml" ]; then
            cp -rf "${here}.pre-commit-config.yaml" "${here}bak/.pre-commit-config.yaml.bak"
            error_code=$?
            if [[ $error_code != 0 ]]; then
                we "WARNING - backup file NOT created: .pre-commit-config.yaml.bak"
                # ONLY WARN -- NO EXIT $error_code
            else
                oe "-> backup file created: ${here}.pre-commit-config.yaml.bak"
            fi
        fi
    }
    yaml_config() {
        # copy template to current config file
        readme_md
        cp -rf "${here}.pre-commit-template.yaml" "${here}.pre-commit-config.yaml"
        error_code=$?
        #   and check to make sure it worked ...
        if [[ $error_code != 0 ]]; then
            we "WARNING: config file NOT created: .pre-commit-config.yaml"
            we 'Exiting now ...'
            exit $error_code
        else
            oe "-> config file created: .pre-commit-config.yaml"
        fi
        # update current config from GitHub repo
        #   and check to make sure it worked ...
        pre-commit autoupdate
        if [[ $? != 0 ]]; then
            we -e "\nWARNING: Error occured while retrieving updated 'master:sha' values from GitHub. Please check your connection and try again later.\n\n"
            exit 1
        else
            oe -e "\nPre-commit successfully updated your configuration."
            git add --all &>/dev/null
            pre-commit &>/dev/null # catch formatting fixes
            git add --all          # again ... after formatting ...
            pre-commit             # again ... after formatting ...
        fi
    }

    # check for a template ... generate if necessary ...
    if [ -r "${here}.pre-commit-template.yaml" ]; then
        oe "Template file (${here}.pre-commit-template.yaml) found in current directory."
    else
        # ONLY WARN -- NO EXIT ... generate needed default template
        we "WARNING: Template file (${here}.pre-commit-template.yaml) NOT found in current directory."
        we "Using generic template ..."
        echo ""
        cp -rf "${here}.pre-commit-template.yaml" "${here}.pre-commit-config.yaml"
    fi
    yaml_backup
    yaml_config
}
setup_files() {
    which_copy() {
        # backup previous and create default file
        if [ -r "$file_bak" ]; then
            cp -f $file_bak bak/$file_bak.bak &>/dev/null
        fi
        cat "$here""$file_bak" >|$file_bak
    }

    file_bak='.gitignore' && which_copy
    file_bak='.info.cfg' && which_copy
    file_bak='.travis.yml' && which_copy
    file_bak='codecov.yml' && which_copy

    readme_md

    if [ -r ".pre-commit-template.yaml" ]; then
        echo "Template file (.pre-commit-template.yaml) found in current directory."
    else
        echo "Template file (.pre-commit-template.yaml) NOT found in current directory."
        echo "Using generic template ..."
        echo ""
        echo "$sample_settings_template" >|.pre-commit-template.yaml
    fi
}
git_repo() {
    mkdir -p bak &>/dev/null
    git status &>/dev/null
    if [[ $? != 0 ]]; then
        echo 'This is not a git repo. Setting up git and github ...'
        echo ''
        echo 'Git repo setup ...'
        echo ''
        git init
        echo 'GitHub remote repo setup ...'
        echo ''
        hub create
        echo ''
    fi
    # initialize pipenv
    pipenv graph &>/dev/null
    if [[ $? != 0 ]]; then
        echo 'This is not a pipenv virtual environment.'
        echo 'Setting up pipenv --python 3.7 ...'
        echo ''
        pipenv --python 3.7
    fi
    # pipenv shell # this screws up the script ...
    pipenv clean
    pipenv graph
    pipenv check
    pip freeze >|requirements.txt
    # pre-commit setup

    # use my sample template instead of `pre-commit sample-config`
    if [[ -z "$here.pre-commit-template.yaml" ]]; then
        echo "$sample_settings_template" >|.pre-commit-template.yaml
        we "Pre-commit template not found in $here. Using default template from $bin_path."
    else
        oe "Pre-commit template located in $here. Continuing with setup ..."
    fi
    pre-commit install
    pre-commit install-hooks
    pre-commit autoupdate
    # git initial commit
    git add --all &>/dev/null
    pre-commit &>/dev/null # catch formatting fixes
    git add --all          # again ... after formatting ...
    git commit -m 'initial commit'
    git push --set-upstream origin master
    git status
    git remote -v
}
all_checkups() {
    prereqs_checkup
    setup_files
    git_repo
    yaml_checkup
}
#* #############################################################################
#* Respond to arguments
check_args() {
    case "$arg1" in
    init | -i | --init)
        all_checkups
        exit 0
        ;;

    reset | -r | --reset)
        echo ''
        we '-> pc - reset initial repo files\n'
        setup_files
        exit 0
        ;;

    version | -v | --version)
        oe "$program_usage"
        exit 0
        ;;

    help | -h | --help)
        oe "$program_instructions"
        exit 0
        ;;

    commit | -m)
        if [[ $arg2 != 0 ]]; then
            yaml_checkup
            git add --all
            git commit -m "$arg2"
            git push
            exit 0
        else
            we "You must specify a commit message to perform a commit."
            echo ""
            exit 2
        fi
        ;;
    *)
        we "Invalid option: $arg1"
        echo ""
        oe "$program_usage"
        exit 2
        ;;
    esac
}
main_loop() {

    # assume valid git repo means everything else is setup ...
    #   if this is not true, <pc init> is available to user
    $(git status &>/dev/null) && yaml_checkup || all_checkups

}

#* #############################################################################
# load some basic ansi text colors (OPTIONAL - output redirected)
#   script will run fine wihout this; you just wont have the colors =)
source "$HOME/bin/symlinks/scripts/basic_text_colors.sh" && oe "Basic Text Colors activated." || fake_colors
#* #############################################################################
#* script intro information
me "\n****************************************************************"
oe "${description}\n"
me "Project details: "
me "================\n"
ge "This script name: $_self"
ge "The script path is: $bin_path"
ge "The active repo is: $here"
echo

if [[ -n "$1" ]]; then
    arg1="$1"
    arg2="$2"
    check_args
else
    main_loop
fi
